#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Post-install script.  Runs as root after package installation.

# Fail on error
set -e


### PROMPTING ###

# Source the debconf library, which gives us functions to prompt the user.
. /usr/share/debconf/confmodule

# Prompt the user for necessary configuration.  If the user has followed our
# README's instructions, this has already been provided and no prompt is
# necessary.

# NOTE: db_input returns a non-zero exit code when skipping a question, so we
# ignore its return value with "|| true".

# The "high" argument is a priority for the config.  This option is necessary.
db_input high shaka-lab-cert-generator/cert_host || true

# This option is not necessary, so we give the "low" priority for the config.
db_input low shaka-lab-cert-generator/certbot_args || true

# The "go" command takes all the batched-together questions from "input"
# commands and displays them, possibly on one screen.
db_go

# Now we should have all necessary configuration.

# The db_get command will fill config values into the global "RET" variable.
# Here we extract them into our own variables with useful names.
db_get shaka-lab-cert-generator/cert_host
CERT_HOST="$RET"
db_get shaka-lab-cert-generator/certbot_args
CERTBOT_ARGS="$RET"


### INSTALLATION ###

# Create a folder for optional SSH configuration to transfer the certificates
# to another machine.
mkdir -p /opt/shaka-lab/shaka-lab-cert-generator

chown root:root /opt/shaka-lab
chmod 755 /opt/shaka-lab

chown root:root /opt/shaka-lab/shaka-lab-cert-generator
chmod 755 /opt/shaka-lab/shaka-lab-cert-generator

# If there isn't one yet, generate an SSH key to authenticate to another
# machine.  This is for convenience when an SSH config is added later.
if [[ ! -f /opt/shaka-lab/shaka-lab-cert-generator/cert-host-id ]]; then
  ssh-keygen \
    -q \
    -f /opt/shaka-lab/shaka-lab-cert-generator/cert-host-id \
    -N ''
fi

# Create a "runner" group using the exact GID used by the Docker image we use
# for the GitHub Actions Runner.  Ignore failures if the group already exists
# or the GID is already in use.  This provides compatibility with
# `shaka-lab-github-runner`.
groupadd -g 121 runner &>/dev/null || true

# Create a deployment hook script for letsencrypt to set the appropriate
# permissions on new keys and certs and optionally transfer them to another
# device:
cat <<EOF >/etc/letsencrypt/renewal-hooks/deploy/shaka-lab-certs.sh
#!/bin/bash

set -e

# World-readable
chmod 755 /etc/letsencrypt/{archive,live}
# World-readable
chmod 644 /etc/letsencrypt/archive/$CERT_HOST/{cert,chain,fullchain}*
# Group-readable
chmod 640 /etc/letsencrypt/archive/$CERT_HOST/privkey*
# Set the group
chown root:121 /etc/letsencrypt/archive/$CERT_HOST/*

# Transfer the certs to another machine is configured to do so:
if [[ -f /opt/shaka-lab/shaka-lab-cert-generator/ssh.config ]]; then
  echo ""
  echo "Attempting to transfer certs..."

  if ! scp -F /opt/shaka-lab/shaka-lab-cert-generator/ssh.config \\
      -r /etc/letsencrypt/{live,archive} \\
      cert-host:/etc/letsencrypt/; then
    echo ""
    echo "*****"
    echo "Warning: transfer of certs failed!"
    echo "*****"
    echo "Please check the SSH config."
    exit 0
  fi
fi
EOF
chmod 744 /etc/letsencrypt/renewal-hooks/deploy/shaka-lab-certs.sh

if [ -d "/etc/letsencrypt/archive/$CERT_HOST/" ]; then
  echo "Certs for this domain already exist.  Not calling certbot."
else
  # Get your initial certificate via DNS challenge and Google Cloud DNS.  After
  # this, certbot will automatically renew the cert before it expires.
  certbot certonly \
    -n \
    --email shaka-lab@github.io --agree-tos \
    --dns-google \
    --domains "$CERT_HOST" \
    $CERTBOT_ARGS
fi

# Update permissions and sync certs immediately.
/etc/letsencrypt/renewal-hooks/deploy/shaka-lab-certs.sh
